package com.feedback;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FeedbackApplication {

	public static void main(String[] args) {
		SpringApplication.run(FeedbackApplication.class, args);
	}
}

------------------------------------------------

package com.feedback.controller;

import java.util.Comparator;

import com.feedback.entity.Feedback;

public class FeedbackComparator implements Comparator<Feedback> {

	@Override
	public int compare(Feedback o1, Feedback o2) {
		return o2.getId() - o1.getId();
	}

}

------------------------------------------------

package com.feedback.controller;

import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.feedback.dao.ProductDAO;
import com.feedback.entity.Feedback;
import com.feedback.entity.Product;

@RestController
public class ProductController {

	@Autowired
	private ProductDAO dao;
	
	@GetMapping("/add")
	public ModelAndView showProductForm() {
		return new ModelAndView("add");
	}
	
	@PostMapping("/products")
	public ModelAndView addProduct(@RequestParam("name")String name, HttpServletRequest request) {
		Product product = new Product();
		product.setName(name);
		dao.save(product);
		List<Product> products = (List<Product>)dao.findAll();
		HttpSession session = request.getSession();
		session.setAttribute("products", products);
		return new ModelAndView("products");
	}
	
	@GetMapping("/products")
	public ModelAndView showAllProducts(HttpServletRequest request) {	
	List<Product> products = (List<Product>)dao.findAll();
	HttpSession session = request.getSession();
	session.setAttribute("products", products);
	return new ModelAndView("products");
	}
	
	@GetMapping("/view/{id}")
	public ModelAndView showProduct(@PathVariable("id")int id, HttpServletRequest request) {
		Product product = dao.findById(id).get();
		List<Feedback> fs = product.getFeedbacks();
		Collections.sort(fs, new FeedbackComparator());
		HttpSession session = request.getSession();
		session.setAttribute("fs", fs);
		return new ModelAndView("/view").addObject("product", product);
	}
	
	@PostMapping("/view/{id}")
	public ModelAndView addReview(@PathVariable("id") int id, @RequestParam("review") String review, HttpServletRequest request) {
		Product product = dao.findById(id).get();
		Feedback feedback = new Feedback(review);
		product.getFeedbacks().add(feedback);
		feedback.setProduct(product);
		dao.save(product);
		List<Feedback> fs = product.getFeedbacks();
		Collections.sort(fs, new FeedbackComparator());
		HttpSession session = request.getSession();
		session.setAttribute("fs", fs);
		return new ModelAndView("/view").addObject("product", product);
	}
	
}

------------------------------------------------

package com.feedback.dao;

import org.springframework.data.repository.CrudRepository;

import com.feedback.entity.Feedback;

public interface FeedbackDAO extends CrudRepository<Feedback, Integer> {

}

------------------------------------------------

package com.feedback.dao;

import org.springframework.data.repository.CrudRepository;

import com.feedback.entity.Product;

public interface ProductDAO extends CrudRepository<Product, Integer> {

}

------------------------------------------------

package com.feedback.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Feedback {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String review;
	
	@ManyToOne
	@ToString.Exclude
	private Product product;

	public Feedback(String review) {
		this.review = review;
	}
}

------------------------------------------------

package com.feedback.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	
	@OneToMany(mappedBy = "product", cascade = CascadeType.ALL)
	private List<Feedback> feedbacks;
}

------------------------------------------------

spring.datasource.url=jdbc:mysql://localhost:3306/hcl
spring.datasource.username=root
spring.datasource.password=root

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.jpa.hibernate.ddl-auto=update

------------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>

<title>Add</title>
</head>
<body>
	<div style="max-width: 500px; margin: auto; border: 1px solid black; padding: 10px; margin-top: 30px; height: 400px; position: relative;"
		class="card text-dark bg-light mb-3">
		<div>
			<h2 style="margin-top: 22%"card-title">Add product</h2>

			<form class="input-group mb-3" method="post" action="products">
				<label class="card-header">Product Name:</label> 
				<input class="form-control" type="text" name="name" required="required">
				<input class="btn btn-primary" type="submit" value="Add">
			</form>
		</div>
	</div>
</body>
</html>

------------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ page import="com.feedback.entity.Product"%>
<%@ page import="java.util.*"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<title>Main</title>
</head>
<body>
	<div class="card text-center">
		<div style="margin: auto;">
			<h1>Products</h1>

			<table class="table table-striped" border='2'>
				<tr class="table table-primary" style="text-align: center">
					<th>Id</th>
					<th>Product Name</th>
				</tr>
				<%
					ArrayList<Product> products = (ArrayList<Product>) session.getAttribute("products");
					for (Product p : products) {
				%>
					<tr style="text-align: center">
						<td><%=p.getId()%></td>
						<td><a href="/view/<%=p.getId()%>"><%=p.getName()%> </a></td>
					</tr>
				<%}%>
			</table>
		</div>
	</div>

</body>
</html>

------------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ page import="com.feedback.entity.Product"%>
<%@ page import="com.feedback.entity.Feedback"%>
<%@ page import="java.util.*"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Product: ${product.getName()}</title>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
</head>
<body>
	<div class="card text-center">
		<div style="margin: auto;">
			<h1>Product</h1>

			<table class="table table-striped" border='2'>
				<tr class="table table-primary" style="text-align: center">
					<th>Id</th>
					<th>Product Name</th>
				</tr>
				<tr>
					<td>${product.getId()}</td>
					<td>${product.getName()}</td>
				</tr>
			</table>

			<div class="input-group mb-3">
				<form method="post" action="/view/${product.getId()}">
					<h2 class="card-header" style="max-width: 36rem; text-align: center; margin-top: 2%; background-color: #717dd9">Post Review</h2>
					<textarea rows="10" cols="50" name="review"></textarea> <br> 
					<input class="btn btn-primary" type="submit" value="Post">
				</form>
			</div>

			<br> <br>
			<table class="table table-striped" border='2'>
				<tr class="table table-primary" style="text-align: center">
					<th>Reviews</th>
				</tr>
					<%
					List<Feedback> fs = (List<Feedback>) session.getAttribute("fs");
					if (fs == null)
						return;
					for (Feedback f : fs) {
					%>
						<tr>
							<td><%=f.getReview()%></td>
						</tr>
					<%}%>
			</table>
		</div>
	</div>

</body>
</html>

-----------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.project2</groupId>
	<artifactId>userfeedback</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>hclTrainingProjectPhase3Lesson2</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
