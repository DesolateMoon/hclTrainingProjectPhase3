package com.task;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;

@SpringBootApplication (scanBasePackages="com")
@EntityScan(basePackages="com")
public class TaskApplication {

	public static void main(String[] args) {
		SpringApplication.run(TaskApplication.class, args);
	}
}

--------------------------------------------

package com.task.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;


@Configuration
@EnableSwagger2
public class SwaggerConfig {
	@Bean
	public Docket postsApi() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.basePackage("com")).build();
	}
}	

--------------------------------------------

package com.task.controller;

import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.task.dao.TaskDAO;
import com.task.dao.UserDAO;
import com.task.entity.Task;
import com.task.entity.User;
import com.task.exceptions.*;

@RestController
public class TaskController {
	
	@Autowired
	private UserDAO userDAO; 
	
	@Autowired
	private TaskDAO taskDAO;
	
	@GetMapping("/register")
	public ModelAndView showRegisterForm() {
		return new ModelAndView("register");
	}
	
	@PostMapping("/login")
	public ModelAndView saveUser(@RequestParam("name") String name,
								 @RequestParam("email") String email,
								 @RequestParam("password") String password) {
		User user = new User(email, name, password);
		userDAO.save(user);
		return new ModelAndView("login");
	}
	
	@GetMapping("/login")
	public ModelAndView showLoginForm() {
		return new ModelAndView("login");
	}
	
	
	@PostMapping("/add")
	public ModelAndView loginUser(@RequestParam("email") String email,
								  @RequestParam("password") String password) {
		if(userDAO.findById(email).get().getPassword().equals(password)) {
			return new ModelAndView("add");
		} 
		return new ModelAndView("login");
	}
	
	@GetMapping("/add")
	public ModelAndView showTaskForm() {
		return new ModelAndView("add");
	}	
	
	@GetMapping("/display")
	public ModelAndView showDisplayForm() {
		return new ModelAndView("display");
	}	
	
	@PostMapping("/display")
	public ModelAndView createTask(@RequestParam("name") String name,
								   @RequestParam("start") String start,
								   @RequestParam("end") String end,
								   @RequestParam("description") String description,
								   @RequestParam("email") String email,
								   @RequestParam("severity") String severity,
								   HttpServletRequest request) {
		Task task = new Task(name, start, end, description, email, severity);
		taskDAO.save(task);
		List<Task> tasks = (List<Task>)taskDAO.findAll();
		HttpSession session = request.getSession();
		session.setAttribute("tasks", tasks);
		return new ModelAndView("display");
	
	}
	
	@GetMapping("/edit/{id}")
	public ModelAndView showTask(@PathVariable("id")int id, HttpServletRequest request) {
		try {
			Task task = taskDAO.findById(id).get();
			if(task == null) {
				throw new InvalidOptionException("Edit Task ID#" + id + "does not exist");
			}
			return new ModelAndView("/edit").addObject("task", task);
		} catch(InvalidOptionException e) {
			return new ModelAndView("login");
		}
	}
	
	@PostMapping("/edit/{id}")
	public ModelAndView updateTask(@PathVariable("id") int id, 
								 @RequestParam("name") String name,
								 @RequestParam("start") String start,
								 @RequestParam("end") String end,
								 @RequestParam("description") String description,
								 @RequestParam("email") String email,
								 @RequestParam("severity") String severity,
								 HttpServletRequest request) {
		taskDAO.findById(id).get().setName(name);
		taskDAO.findById(id).get().setStart(start);
		taskDAO.findById(id).get().setEnd(end);
		taskDAO.findById(id).get().setDescription(description);
		taskDAO.findById(id).get().setEmail(email);
		taskDAO.findById(id).get().setSeverity(severity);
		List<Task> tasks = (List<Task>)taskDAO.findAll();
		HttpSession session = request.getSession();
		session.setAttribute("tasks", tasks);
		return new ModelAndView("display");
	}
	
	@PostMapping("/delete/{id}")
	public ModelAndView deleteTask(@PathVariable("id") int id,
							       HttpServletRequest request) {
		try {
			taskDAO.deleteById(id);
			if(taskDAO.existsById(id)) {
				throw new FailedDeleteException("Delete Task ID#" + id + "failed");
			}
			List<Task> tasks = (List<Task>)taskDAO.findAll();
			HttpSession session = request.getSession();
			session.setAttribute("tasks", tasks);
			return new ModelAndView("display");
		} catch(FailedDeleteException e) {
			return new ModelAndView("login");
		}
	}
}

--------------------------------------------

package com.task.dao;

import org.springframework.data.repository.CrudRepository;

import com.task.entity.Task;

public interface TaskDAO extends CrudRepository<Task, Integer> {

}

--------------------------------------------

package com.task.dao;

import org.springframework.data.repository.CrudRepository;

import com.task.entity.User;

public interface UserDAO extends CrudRepository<User, String>{

}

--------------------------------------------

package com.task.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Task {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private String start;
	private String end;
	private String description;
	private String email;
	private String severity;
	
	public Task(String name, String start, String end, String description, String email, String severity) {
		super();
		this.name = name;
		this.start = start;
		this.end = end;
		this.description = description;
		this.email = email;
		this.severity = severity;
	}
}

--------------------------------------------

package com.task.entity;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class User {
	@Id
	private String email;
	private String name;
	private String password;
}

--------------------------------------------

package com.task.exceptions;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class CustomException extends Exception{
	private String exceptionId;

}

--------------------------------------------

package com.task.exceptions;


public class FailedDeleteException extends CustomException{
	public FailedDeleteException() {
		super();
	}

	public FailedDeleteException(String exceptionId) {
		super(exceptionId);
	}
}

--------------------------------------------

package com.task.exceptions;

public class InvalidOptionException extends CustomException{
	public InvalidOptionException() {
		super();
	}

	public InvalidOptionException(String exceptionId) {
		super(exceptionId);
	}
}

--------------------------------------------

spring.datasource.url=jdbc:mysql://localhost:3306/hcl
spring.datasource.username=root
spring.datasource.password=root

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.jpa.hibernate.ddl-auto=update

--------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>

<title>Add</title>
</head>
<body>
	<div style="max-width: 500px; margin: auto; border: 1px solid black; padding: 10px; margin-top: 30px; height: 500px; position: relative;"
		class="card text-dark bg-light mb-3">
		<div>
			<h2 style="margin-top: 3%"card-title">Add task</h2>

			<form class="form-group" method="post" action="display">
				<label class="card-header">Task Name:</label> 
				<input class="form-control" type="text" name="name" required="required">
				
				Start Date: <input type= "date" name="start"> </br>
				End Date: <input type= "date" name="end"> </br>
				
				<label class="card-header">Description:</label> 
				<input class="form-control" type="text" name="description" required="required">
				<label class="card-header">Email:</label> 
				<input class="form-control" type="text" name="email" required="required">
				<label class="card-header">Severity:</label> 
				<select name="severity" required="required">
					<option value="">--</option>
					<option value="High">High</option>
					<option value="Medium">Medium</option>
					<option value="Low">Low</option>
				</select> </br>
				
				</br> 
				<input class="btn btn-primary" type="submit" value="Add Task">
				
			</form>
		</div>
	</div>
</body>
</html>

--------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ page import="com.task.entity.Task"%>
<%@ page import="java.util.*"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<title>Main</title>
</head>
<body>
	<div class="card text-center">
		<div style="margin: auto;">
			<h1>Tasks</h1>

			<table class="table table-striped" border='2'>
				<tr class="table table-primary" style="text-align: center">
					<th>Id</th>
					<th>Task Name</th>
					<th>Email</th>
					<th>Severity</th>
					<th>Start Date</th>
					<th>End Date</th>
					<th>Description</th>
					
					
				</tr>
				<%
					ArrayList<Task> tasks = (ArrayList<Task>) session.getAttribute("tasks");
					for (Task t : tasks) {
				%>
					<tr style="text-align: center">
						<td><%=t.getId()%></td>
						<td><a href="/edit/<%=t.getId()%>"><%=t.getName()%> </a></td>
						<td><%=t.getEmail()%></td>
						<td><%=t.getSeverity()%></td>
						<td><%=t.getStart()%></td>
						<td><%=t.getEnd()%></td>
						<td><%=t.getDescription()%></td>
					</tr>
				<%}%>
			</table>
		</div>
	</div>

</body>
</html>

--------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ page import="com.task.entity.Task"%>
<%@ page import="java.util.*"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Task: ${task.getName()}</title>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<title>Edit</title>
</head>
<body>
	<div style="max-width: 500px; margin: auto; border: 1px solid black; padding: 10px; margin-top: 30px; height: 535px; position: relative;"
		class="card text-dark bg-light mb-3">
		<div>
			<h2 style="margin-top: 3%"card-title">Edit task</h2>

			<form class="form-group" method="post">
				<label class="card-header">Task Name:</label> 
				<input class="form-control" type="text" name="name" value=${task.getName()} required="required">
				
				Start Date: <input type= "date" name="start" value=${task.getStart()} required="required"> </br>
				End Date: <input type= "date" name="end" value=${task.getEnd()} required="required"> </br>
				
				<label class="card-header">Description:</label> 
				<input class="form-control" type="text" name="description" required="required">
				<label class="card-header">Email:</label> 
				<input class="form-control" type="text" name="email" value=${task.getEmail()} required="required">
				<label class="card-header">Severity:</label> 
				<select name="severity" required="required">
					<option value="">--</option>
					<option value="High">High</option>
					<option value="Medium">Medium</option>
					<option value="Low">Low</option>
				</select> </br>
				
				</br> 
				<input class="btn btn-primary" type="submit" value="Save">
			</form>
			<form class="form-group" method="post" action="/delete/${task.getId()}">
				<input class="btn btn-danger" type="submit" value="Delete">
			</form>
		</div>
	</div>

</body>
</html>

--------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>

<title>Login</title>
</head>
<body>
	<div style="max-width: 500px; margin: auto; border: 1px solid black; padding: 10px; margin-top: 30px; height: 325px; position: relative;"
		class="card text-dark bg-light mb-3">
		<div>
			<h2 style="margin-top: 2%"card-title">Login</h2>
			<form class="form-group" method="post" action="add">
				<label class="card-header">Email:</label> 
				<input class="form-control" type="text" name="email" required="required">
				<label class="card-header">Password:</label> 
				<input class="form-control" type="password" name="password" required="required">
				</br> 
				<input class="btn btn-primary" type="submit" value="Login">
			</form>
		</div>
	</div>
</body>
</html>

--------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.min.js"
	integrity="sha384-pQQkAEnwaBkjpqZ8RU1fF1AKtTcHJwFl3pblpTlHXybJjHpMYo79HY3hIi4NKxyj"
	crossorigin="anonymous"></script>
<script
	src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"
	integrity="sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2maXQHiDX9d4/zp8Ok3f+M7DPm+Ib6IU"
	crossorigin="anonymous"></script>

<title>Register</title>
</head>
<body>
	<div style="max-width: 500px; margin: auto; border: 1px solid black; padding: 10px; margin-top: 30px; height: 400px; position: relative;"
		class="card text-dark bg-light mb-3">
		<div>
			<h2 style="margin-top: 3%"card-title">Register User</h2>
			<form class="form-group" method="post" action="login">
				<label class="card-header">Name:</label> 
				<input class="form-control" type="text" name="name" required="required">
				<label class="card-header">Email:</label> 
				<input class="form-control" type="text" name="email" required="required">
				<label class="card-header">Password:</label> 
				<input class="form-control" type="password" name="password" required="required">
				</br> 
				<input class="btn btn-primary" type="submit" value="Create User">
			</form>
		</div>
	</div>
</body>
</html>

--------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com</groupId>
	<artifactId>task</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>hclTrainingProjectPhase3FinalProject</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.4.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
